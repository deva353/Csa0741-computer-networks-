# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Load the dataset (assuming you have a CSV file)
data = pd.read_csv('telecom_churn_dataset.csv')

# Preprocess the data (you may need to handle missing values, encode categorical variables, etc.)
# For simplicity, let's assume data preprocessing has been done

# Split data into features and target variable
X = data.drop('Churn', axis=1)
y = data['Churn']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize SVM classifier
svm_clf = SVC(kernel='linear', C=1.0)
svm_clf.fit(X_train_scaled, y_train)

# Initialize KNN classifier
knn_clf = KNeighborsClassifier(n_neighbors=5)
knn_clf.fit(X_train_scaled, y_train)

# Predict using SVM and KNN classifiers
svm_pred = svm_clf.predict(X_test_scaled)
knn_pred = knn_clf.predict(X_test_scaled)

# Evaluate accuracy
svm_accuracy = accuracy_score(y_test, svm_pred)
knn_accuracy = accuracy_score(y_test, knn_pred)

print(f"SVM Accuracy: {svm_accuracy}")
print(f"KNN Accuracy: {knn_accuracy}")
